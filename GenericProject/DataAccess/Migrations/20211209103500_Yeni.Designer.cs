// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ProjeDbContext))]
    [Migration("20211209103500_Yeni")]
    partial class Yeni
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.Model.Dates", b =>
                {
                    b.Property<int>("Date_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Tarih")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Doctor_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Patient_Id")
                        .HasColumnType("int");

                    b.HasKey("Date_Id");

                    b.HasIndex("Doctor_Id");

                    b.HasIndex("Patient_Id");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("Entity.Model.Doctors", b =>
                {
                    b.Property<int>("Doctor_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Doctor_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hospital_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActıve")
                        .HasColumnType("bit");

                    b.Property<int?>("Poliklinik_Id")
                        .HasColumnType("int");

                    b.HasKey("Doctor_Id");

                    b.HasIndex("Hospital_Id");

                    b.HasIndex("Poliklinik_Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Entity.Model.Hospitals", b =>
                {
                    b.Property<int>("Hospital_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hospital_Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDoctors")
                        .HasColumnType("int");

                    b.HasKey("Hospital_Id");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("Entity.Model.Patients", b =>
                {
                    b.Property<int>("Patient_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Hospital_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Patient_Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Patient_Id");

                    b.HasIndex("Hospital_Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Entity.Model.Polikliniks", b =>
                {
                    b.Property<int>("Poliklinik_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDoctors")
                        .HasColumnType("int");

                    b.Property<string>("Poliklinik_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Poliklinik_Id");

                    b.ToTable("Poliklinik");
                });

            modelBuilder.Entity("Entity.Model.Prescriptions", b =>
                {
                    b.Property<int>("Prescriptions_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Doctor_Id")
                        .HasColumnType("int");

                    b.Property<string>("Medicine_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Patient_Id")
                        .HasColumnType("int");

                    b.HasKey("Prescriptions_Id");

                    b.HasIndex("Doctor_Id");

                    b.HasIndex("Patient_Id");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("Entity.Model.Users", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("User_Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entity.Model.Dates", b =>
                {
                    b.HasOne("Entity.Model.Doctors", "Doctor")
                        .WithMany("Date")
                        .HasForeignKey("Doctor_Id");

                    b.HasOne("Entity.Model.Patients", "Patient")
                        .WithMany("Date")
                        .HasForeignKey("Patient_Id");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entity.Model.Doctors", b =>
                {
                    b.HasOne("Entity.Model.Hospitals", "Hospital")
                        .WithMany("Doctor")
                        .HasForeignKey("Hospital_Id");

                    b.HasOne("Entity.Model.Polikliniks", "Poliklinik")
                        .WithMany("Doctor")
                        .HasForeignKey("Poliklinik_Id");

                    b.Navigation("Hospital");

                    b.Navigation("Poliklinik");
                });

            modelBuilder.Entity("Entity.Model.Patients", b =>
                {
                    b.HasOne("Entity.Model.Hospitals", "Hospital")
                        .WithMany("Patient")
                        .HasForeignKey("Hospital_Id");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Entity.Model.Prescriptions", b =>
                {
                    b.HasOne("Entity.Model.Doctors", "Doctor")
                        .WithMany("Prescription")
                        .HasForeignKey("Doctor_Id");

                    b.HasOne("Entity.Model.Patients", "Patient")
                        .WithMany("Prescription")
                        .HasForeignKey("Patient_Id");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entity.Model.Doctors", b =>
                {
                    b.Navigation("Date");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Entity.Model.Hospitals", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entity.Model.Patients", b =>
                {
                    b.Navigation("Date");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Entity.Model.Polikliniks", b =>
                {
                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
